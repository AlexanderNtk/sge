package types

import (
	"encoding/binary"

	"github.com/sge-network/sge/utils"
)

var _ binary.ByteOrder

var (
	// RewardKeyPrefix is the prefix to retrieve all applied rewards
	RewardKeyPrefix = []byte{0x01}

	// RewardOneTimeKeyPrefix is the prefix to retrieve all applied rewards that not allowed to be granted twice.
	RewardOneTimeKeyPrefix = []byte{0x02}

	// RewardByReceiverKeyPrefix is the prefix to retrieve all applied rewards for a certain receiver account.
	RewardByReceiverKeyPrefix = []byte{0x03}
)

// GetRewardsByAccPrefix returns the store key to retrieve list of all applied rewards of a house of
// a certain campaign
// this should be used with RewardByReceiverKeyPrefix
func GetRewardsByAccPrefix(receiverAcc string) []byte {
	return utils.StrBytes(receiverAcc)
}

// GetRewardsByCampaignPrefix returns the store key to retrieve list of all applied rewards of a house of
// a certain campaign
// this should be used with RewardKeyPrefix
func GetRewardsByCampaignPrefix(campaignUID string) []byte {
	return utils.StrBytes(campaignUID)
}

// GetRewardsByTypePrefix returns the store key to retrieve list of all applied rewards of a house
// this should be used with RewardOneTimeKeyPrefix
func GetRewardsByTypePrefix(rewardType RewardType) []byte {
	return utils.Int32ToBytes(int32(rewardType))
}

// GetOneTimeRewardsPrefix returns the store key to retrieve list of all applied one-time rewards of a house
// can be used to prevent double reward grant
// onetimekey: is generated by code logic according to the reward type,
//
//	ex: signup reward = signup reward receiver
//	    referral reward = appended strings of reward referral reward receivers
//
// this should be used with RewardOneTimeKeyPrefix
func GetOneTimeRewardsPrefix(rewardType RewardType, oneTimeKey string) []byte {
	return append(utils.Int32ToBytes(int32(rewardType)), utils.StrBytes(oneTimeKey)...)
}
