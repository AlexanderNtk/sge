// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/reward/reward.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RewardType defines supported types of rewards of reward module.
type RewardType int32

const (
	// the invalid or unknown
	RewardType_REWARD_TYPE_UNSPECIFIED RewardType = 0
	// signup reward
	RewardType_REWARD_TYPE_SIGNUP RewardType = 1
	// referral reward
	RewardType_REWARD_TYPE_REFERRAL RewardType = 2
	// affiliation reward
	RewardType_REWARD_TYPE_AFFILIATION RewardType = 3
	// noloss bets reward
	RewardType_REWARD_TYPE_NOLOSS_BETS RewardType = 4
)

var RewardType_name = map[int32]string{
	0: "REWARD_TYPE_UNSPECIFIED",
	1: "REWARD_TYPE_SIGNUP",
	2: "REWARD_TYPE_REFERRAL",
	3: "REWARD_TYPE_AFFILIATION",
	4: "REWARD_TYPE_NOLOSS_BETS",
}

var RewardType_value = map[string]int32{
	"REWARD_TYPE_UNSPECIFIED": 0,
	"REWARD_TYPE_SIGNUP":      1,
	"REWARD_TYPE_REFERRAL":    2,
	"REWARD_TYPE_AFFILIATION": 3,
	"REWARD_TYPE_NOLOSS_BETS": 4,
}

func (x RewardType) String() string {
	return proto.EnumName(RewardType_name, int32(x))
}

func (RewardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3412add70a4f177f, []int{0}
}

// ReceiverAccType defines supported types account types for reward
// distribution.
type ReceiverAccType int32

const (
	// the invalid or unknown
	ReceiverAccType_RECEIVER_ACC_TYPE_UNSPECIFIED ReceiverAccType = 0
	// main account
	ReceiverAccType_RECEIVER_ACC_TYPE_MAIN ReceiverAccType = 1
	// sub account
	ReceiverAccType_RECEIVER_ACC_TYPE_SUB ReceiverAccType = 2
)

var ReceiverAccType_name = map[int32]string{
	0: "RECEIVER_ACC_TYPE_UNSPECIFIED",
	1: "RECEIVER_ACC_TYPE_MAIN",
	2: "RECEIVER_ACC_TYPE_SUB",
}

var ReceiverAccType_value = map[string]int32{
	"RECEIVER_ACC_TYPE_UNSPECIFIED": 0,
	"RECEIVER_ACC_TYPE_MAIN":        1,
	"RECEIVER_ACC_TYPE_SUB":         2,
}

func (x ReceiverAccType) String() string {
	return proto.EnumName(ReceiverAccType_name, int32(x))
}

func (ReceiverAccType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3412add70a4f177f, []int{1}
}

// ReceiverType defines all of reward receiver types in the system.
type ReceiverType int32

const (
	// the invalid or unknown
	ReceiverType_RECEIVER_TYPE_UNSPECIFIED ReceiverType = 0
	// single receiver account
	ReceiverType_RECEIVER_TYPE_SINGLE ReceiverType = 1
	// referrer
	ReceiverType_RECEIVER_TYPE_REFERRER ReceiverType = 2
	// referee
	ReceiverType_RECEIVER_TYPE_REFEREE ReceiverType = 3
)

var ReceiverType_name = map[int32]string{
	0: "RECEIVER_TYPE_UNSPECIFIED",
	1: "RECEIVER_TYPE_SINGLE",
	2: "RECEIVER_TYPE_REFERRER",
	3: "RECEIVER_TYPE_REFEREE",
}

var ReceiverType_value = map[string]int32{
	"RECEIVER_TYPE_UNSPECIFIED": 0,
	"RECEIVER_TYPE_SINGLE":      1,
	"RECEIVER_TYPE_REFERRER":    2,
	"RECEIVER_TYPE_REFEREE":     3,
}

func (x ReceiverType) String() string {
	return proto.EnumName(ReceiverType_name, int32(x))
}

func (ReceiverType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3412add70a4f177f, []int{2}
}

// RewardCommon is the type for common data of a reward.
type RewardCommon struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CampaignUID string `protobuf:"bytes,2,opt,name=campaign_uid,proto3" json:"campaign_uid"`
	TS          uint64 `protobuf:"varint,3,opt,name=ts,proto3" json:"ts"`
}

func (m *RewardCommon) Reset()         { *m = RewardCommon{} }
func (m *RewardCommon) String() string { return proto.CompactTextString(m) }
func (*RewardCommon) ProtoMessage()    {}
func (*RewardCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_3412add70a4f177f, []int{0}
}
func (m *RewardCommon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardCommon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardCommon.Merge(m, src)
}
func (m *RewardCommon) XXX_Size() int {
	return m.Size()
}
func (m *RewardCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardCommon.DiscardUnknown(m)
}

var xxx_messageInfo_RewardCommon proto.InternalMessageInfo

func (m *RewardCommon) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *RewardCommon) GetCampaignUID() string {
	if m != nil {
		return m.CampaignUID
	}
	return ""
}

func (m *RewardCommon) GetTS() uint64 {
	if m != nil {
		return m.TS
	}
	return 0
}

// Definition is the type for reward declaration for a campaign.
type Definition struct {
	ReceiverType ReceiverType          `protobuf:"varint,1,opt,name=receiver_type,json=receiverType,proto3,enum=sgenetwork.sge.reward.ReceiverType" json:"receiver_type,omitempty"`
	Amount       cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" yaml:"amount"`
	DstAccType   ReceiverAccType       `protobuf:"varint,3,opt,name=dst_acc_type,json=dstAccType,proto3,enum=sgenetwork.sge.reward.ReceiverAccType" json:"dst_acc_type,omitempty"`
	UnlockTS     uint64                `protobuf:"varint,4,opt,name=unlock_ts,proto3" json:"unlock_ts"`
}

func (m *Definition) Reset()         { *m = Definition{} }
func (m *Definition) String() string { return proto.CompactTextString(m) }
func (*Definition) ProtoMessage()    {}
func (*Definition) Descriptor() ([]byte, []int) {
	return fileDescriptor_3412add70a4f177f, []int{1}
}
func (m *Definition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Definition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Definition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Definition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Definition.Merge(m, src)
}
func (m *Definition) XXX_Size() int {
	return m.Size()
}
func (m *Definition) XXX_DiscardUnknown() {
	xxx_messageInfo_Definition.DiscardUnknown(m)
}

var xxx_messageInfo_Definition proto.InternalMessageInfo

func (m *Definition) GetReceiverType() ReceiverType {
	if m != nil {
		return m.ReceiverType
	}
	return ReceiverType_RECEIVER_TYPE_UNSPECIFIED
}

func (m *Definition) GetDstAccType() ReceiverAccType {
	if m != nil {
		return m.DstAccType
	}
	return ReceiverAccType_RECEIVER_ACC_TYPE_UNSPECIFIED
}

func (m *Definition) GetUnlockTS() uint64 {
	if m != nil {
		return m.UnlockTS
	}
	return 0
}

// Distribution is the type for the distribution of a reward.
type Distribution struct {
	AccAddr    string     `protobuf:"bytes,1,opt,name=acc_addr,json=accAddr,proto3" json:"acc_addr,omitempty"`
	Allocation Allocation `protobuf:"bytes,2,opt,name=allocation,proto3" json:"allocation"`
}

func (m *Distribution) Reset()         { *m = Distribution{} }
func (m *Distribution) String() string { return proto.CompactTextString(m) }
func (*Distribution) ProtoMessage()    {}
func (*Distribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_3412add70a4f177f, []int{2}
}
func (m *Distribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Distribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Distribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Distribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Distribution.Merge(m, src)
}
func (m *Distribution) XXX_Size() int {
	return m.Size()
}
func (m *Distribution) XXX_DiscardUnknown() {
	xxx_messageInfo_Distribution.DiscardUnknown(m)
}

var xxx_messageInfo_Distribution proto.InternalMessageInfo

func (m *Distribution) GetAccAddr() string {
	if m != nil {
		return m.AccAddr
	}
	return ""
}

func (m *Distribution) GetAllocation() Allocation {
	if m != nil {
		return m.Allocation
	}
	return Allocation{}
}

// Allocation is the distribution allocation of the rewards.
type Allocation struct {
	Amount          cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" yaml:"amount"`
	ReceiverAccType ReceiverAccType       `protobuf:"varint,2,opt,name=receiver_acc_type,json=receiverAccType,proto3,enum=sgenetwork.sge.reward.ReceiverAccType" json:"receiver_acc_type,omitempty"`
	ExpTs           uint64                `protobuf:"varint,3,opt,name=exp_ts,json=expTs,proto3" json:"exp_ts,omitempty"`
}

func (m *Allocation) Reset()         { *m = Allocation{} }
func (m *Allocation) String() string { return proto.CompactTextString(m) }
func (*Allocation) ProtoMessage()    {}
func (*Allocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3412add70a4f177f, []int{3}
}
func (m *Allocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Allocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Allocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Allocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Allocation.Merge(m, src)
}
func (m *Allocation) XXX_Size() int {
	return m.Size()
}
func (m *Allocation) XXX_DiscardUnknown() {
	xxx_messageInfo_Allocation.DiscardUnknown(m)
}

var xxx_messageInfo_Allocation proto.InternalMessageInfo

func (m *Allocation) GetReceiverAccType() ReceiverAccType {
	if m != nil {
		return m.ReceiverAccType
	}
	return ReceiverAccType_RECEIVER_ACC_TYPE_UNSPECIFIED
}

func (m *Allocation) GetExpTs() uint64 {
	if m != nil {
		return m.ExpTs
	}
	return 0
}

// Receiver is the type for reward receiver properties.
type Receiver struct {
	RecType ReceiverType `protobuf:"varint,1,opt,name=rec_type,json=recType,proto3,enum=sgenetwork.sge.reward.ReceiverType" json:"rec_type,omitempty"`
	Addr    string       `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *Receiver) Reset()         { *m = Receiver{} }
func (m *Receiver) String() string { return proto.CompactTextString(m) }
func (*Receiver) ProtoMessage()    {}
func (*Receiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_3412add70a4f177f, []int{4}
}
func (m *Receiver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Receiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Receiver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Receiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Receiver.Merge(m, src)
}
func (m *Receiver) XXX_Size() int {
	return m.Size()
}
func (m *Receiver) XXX_DiscardUnknown() {
	xxx_messageInfo_Receiver.DiscardUnknown(m)
}

var xxx_messageInfo_Receiver proto.InternalMessageInfo

func (m *Receiver) GetRecType() ReceiverType {
	if m != nil {
		return m.RecType
	}
	return ReceiverType_RECEIVER_TYPE_UNSPECIFIED
}

func (m *Receiver) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterEnum("sgenetwork.sge.reward.RewardType", RewardType_name, RewardType_value)
	proto.RegisterEnum("sgenetwork.sge.reward.ReceiverAccType", ReceiverAccType_name, ReceiverAccType_value)
	proto.RegisterEnum("sgenetwork.sge.reward.ReceiverType", ReceiverType_name, ReceiverType_value)
	proto.RegisterType((*RewardCommon)(nil), "sgenetwork.sge.reward.RewardCommon")
	proto.RegisterType((*Definition)(nil), "sgenetwork.sge.reward.Definition")
	proto.RegisterType((*Distribution)(nil), "sgenetwork.sge.reward.Distribution")
	proto.RegisterType((*Allocation)(nil), "sgenetwork.sge.reward.Allocation")
	proto.RegisterType((*Receiver)(nil), "sgenetwork.sge.reward.Receiver")
}

func init() { proto.RegisterFile("sge/reward/reward.proto", fileDescriptor_3412add70a4f177f) }

var fileDescriptor_3412add70a4f177f = []byte{
	// 708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0x9d, 0xd0, 0xcd, 0xbe, 0xcd, 0xb2, 0x66, 0xb4, 0xd9, 0x4d, 0x0a, 0x8d, 0xdb, 0x20,
	0xa1, 0x52, 0x09, 0x47, 0x2a, 0x07, 0x24, 0x0e, 0x48, 0x8e, 0xe3, 0xb4, 0x96, 0x42, 0x5a, 0x8d,
	0x13, 0x10, 0x1c, 0xb0, 0x5c, 0x7b, 0x70, 0xad, 0xc4, 0x9e, 0xc8, 0x33, 0xa1, 0xed, 0x85, 0x2f,
	0xc0, 0x85, 0x0b, 0x1f, 0x80, 0x4f, 0xc2, 0xb5, 0xc7, 0x1e, 0x11, 0x07, 0x0b, 0xa5, 0xb7, 0x1e,
	0xf9, 0x04, 0xc8, 0x93, 0x7f, 0x4e, 0x5b, 0x84, 0xaa, 0x3d, 0xf9, 0xcd, 0xfb, 0xfd, 0x9e, 0xdf,
	0x6f, 0x7e, 0xf3, 0x66, 0xe0, 0x2d, 0x0b, 0x48, 0x2b, 0x21, 0x17, 0x6e, 0xe2, 0x2f, 0x3e, 0xda,
	0x24, 0xa1, 0x9c, 0xa2, 0x2a, 0x0b, 0x48, 0x4c, 0xf8, 0x05, 0x4d, 0x46, 0x1a, 0x0b, 0x88, 0x36,
	0x07, 0xb7, 0x5f, 0x07, 0x34, 0xa0, 0x82, 0xd1, 0xca, 0xa2, 0x39, 0xb9, 0xf9, 0x8b, 0x04, 0x15,
	0x2c, 0x08, 0x06, 0x8d, 0x22, 0x1a, 0xa3, 0x1a, 0x3c, 0xf3, 0x12, 0xe2, 0x72, 0x9a, 0xd4, 0xa4,
	0x5d, 0x69, 0xff, 0x39, 0x5e, 0x2e, 0x91, 0x01, 0x15, 0xcf, 0x8d, 0x26, 0x6e, 0x18, 0xc4, 0xce,
	0x34, 0xf4, 0x6b, 0x72, 0x06, 0xb7, 0xd5, 0x59, 0xaa, 0xbe, 0x30, 0x16, 0xf9, 0xa1, 0xd5, 0xb9,
	0x4b, 0xd5, 0x0d, 0x1a, 0xde, 0x58, 0xa1, 0x8f, 0x40, 0xe6, 0xac, 0x56, 0xdc, 0x95, 0xf6, 0x4b,
	0xed, 0xca, 0x2c, 0x55, 0xe5, 0x81, 0x7d, 0x97, 0xaa, 0x32, 0x67, 0x58, 0xe6, 0xac, 0xf9, 0xbb,
	0x0c, 0xd0, 0x21, 0x3f, 0x86, 0x71, 0xc8, 0x43, 0x1a, 0xa3, 0x63, 0x78, 0x99, 0x10, 0x8f, 0x84,
	0x3f, 0x91, 0xc4, 0xe1, 0x57, 0x13, 0x22, 0x14, 0xbd, 0x7f, 0xf8, 0xb1, 0xf6, 0xe8, 0x0e, 0x35,
	0xbc, 0xe0, 0x0e, 0xae, 0x26, 0x04, 0x57, 0x92, 0xdc, 0x0a, 0x75, 0x61, 0xcb, 0x8d, 0xe8, 0x34,
	0xe6, 0x0b, 0xd5, 0xda, 0x75, 0xaa, 0x16, 0xfe, 0x4a, 0xd5, 0xaa, 0x47, 0x59, 0x44, 0x19, 0xf3,
	0x47, 0x5a, 0x48, 0x5b, 0x91, 0xcb, 0xcf, 0x35, 0x2b, 0xe6, 0xff, 0xa4, 0xea, 0xcb, 0x2b, 0x37,
	0x1a, 0x7f, 0xd9, 0x9c, 0x17, 0x35, 0xf1, 0xa2, 0x1a, 0x1d, 0x43, 0xc5, 0x67, 0xdc, 0x71, 0x3d,
	0x6f, 0x2e, 0xa8, 0x28, 0x04, 0x7d, 0xf2, 0x3f, 0x82, 0x74, 0xcf, 0x13, 0x9a, 0xc0, 0x67, 0x7c,
	0x11, 0xa3, 0x2f, 0xe0, 0xf9, 0x34, 0x1e, 0x53, 0x6f, 0xe4, 0x70, 0x56, 0x2b, 0x09, 0x3f, 0xea,
	0xb3, 0x54, 0x2d, 0x0f, 0x45, 0x52, 0xb8, 0xb2, 0x26, 0xe0, 0x75, 0xd8, 0x4c, 0xa0, 0xd2, 0x09,
	0x19, 0x4f, 0xc2, 0xb3, 0xa9, 0x30, 0xa9, 0x0e, 0xe5, 0x4c, 0x8e, 0xeb, 0xfb, 0xab, 0x13, 0x73,
	0x3d, 0x4f, 0xf7, 0xfd, 0x04, 0x1d, 0x01, 0xb8, 0xe3, 0x31, 0xf5, 0xdc, 0x8c, 0x28, 0x76, 0xfe,
	0xe2, 0x70, 0xef, 0x3f, 0xb4, 0xea, 0x2b, 0x62, 0xbb, 0x94, 0x99, 0x83, 0x73, 0xa5, 0xcd, 0x3f,
	0x24, 0x80, 0x35, 0x21, 0xe7, 0xa6, 0xf4, 0x4e, 0x6e, 0x62, 0xf8, 0x60, 0x75, 0xbe, 0x2b, 0x4b,
	0xe5, 0x27, 0x59, 0xfa, 0x2a, 0xd9, 0x4c, 0xa0, 0x2a, 0x6c, 0x91, 0xcb, 0x89, 0xb3, 0x1c, 0x32,
	0xfc, 0x1e, 0xb9, 0x9c, 0x0c, 0x58, 0xf3, 0x07, 0x28, 0x2f, 0x4b, 0xd1, 0x57, 0x50, 0x4e, 0x88,
	0xf7, 0xe4, 0x89, 0x7a, 0x96, 0x90, 0x79, 0x0b, 0x04, 0x25, 0xe1, 0xb6, 0x18, 0x25, 0x2c, 0xe2,
	0x83, 0xdf, 0x24, 0x80, 0xf9, 0x3d, 0x12, 0x94, 0x0f, 0xe1, 0x2d, 0x36, 0xbf, 0xd5, 0x71, 0xc7,
	0x19, 0x7c, 0x77, 0x6a, 0x3a, 0xc3, 0xbe, 0x7d, 0x6a, 0x1a, 0x56, 0xd7, 0x32, 0x3b, 0x4a, 0x01,
	0xbd, 0x01, 0x94, 0x07, 0x6d, 0xeb, 0xa8, 0x3f, 0x3c, 0x55, 0x24, 0x54, 0x83, 0xd7, 0xf9, 0x3c,
	0x36, 0xbb, 0x26, 0xc6, 0x7a, 0x4f, 0x91, 0xef, 0xff, 0x4e, 0xef, 0x76, 0xad, 0x9e, 0xa5, 0x0f,
	0xac, 0x93, 0xbe, 0x52, 0xbc, 0x0f, 0xf6, 0x4f, 0x7a, 0x27, 0xb6, 0xed, 0xb4, 0xcd, 0x81, 0xad,
	0x94, 0x0e, 0x46, 0xf0, 0xea, 0x9e, 0x65, 0x68, 0x0f, 0x76, 0xb0, 0x69, 0x98, 0xd6, 0x37, 0x26,
	0x76, 0x74, 0xc3, 0x78, 0x4c, 0xe1, 0x36, 0xbc, 0x79, 0x48, 0xf9, 0x5a, 0xb7, 0xfa, 0x8a, 0x84,
	0xea, 0x50, 0x7d, 0x88, 0xd9, 0xc3, 0xb6, 0x22, 0x1f, 0xfc, 0x9c, 0xbd, 0x25, 0xb9, 0x5b, 0xb7,
	0x03, 0xf5, 0x15, 0xf5, 0x91, 0x2e, 0x62, 0xbf, 0x79, 0xd8, 0xb6, 0xfa, 0x47, 0x3d, 0x53, 0x91,
	0x36, 0xfa, 0xe7, 0xbc, 0x30, 0xb1, 0x22, 0x6f, 0xf4, 0x5f, 0x63, 0xa6, 0xa9, 0x14, 0xdb, 0xc6,
	0xf5, 0xac, 0x21, 0xdd, 0xcc, 0x1a, 0xd2, 0xdf, 0xb3, 0x86, 0xf4, 0xeb, 0x6d, 0xa3, 0x70, 0x73,
	0xdb, 0x28, 0xfc, 0x79, 0xdb, 0x28, 0x7c, 0xff, 0x69, 0x10, 0xf2, 0xf3, 0xe9, 0x99, 0xe6, 0xd1,
	0xa8, 0xc5, 0x02, 0xf2, 0xd9, 0xe2, 0xac, 0xb3, 0xb8, 0x75, 0xb9, 0x7c, 0x45, 0xb3, 0x81, 0x60,
	0x67, 0x5b, 0xe2, 0x61, 0xfc, 0xfc, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0xaa, 0xed, 0x87,
	0x60, 0x05, 0x00, 0x00,
}

func (m *RewardCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardCommon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardCommon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TS != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.TS))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CampaignUID) > 0 {
		i -= len(m.CampaignUID)
		copy(dAtA[i:], m.CampaignUID)
		i = encodeVarintReward(dAtA, i, uint64(len(m.CampaignUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Definition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Definition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Definition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnlockTS != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.UnlockTS))
		i--
		dAtA[i] = 0x20
	}
	if m.DstAccType != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.DstAccType))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ReceiverType != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ReceiverType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Distribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Distribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Distribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Allocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.AccAddr) > 0 {
		i -= len(m.AccAddr)
		copy(dAtA[i:], m.AccAddr)
		i = encodeVarintReward(dAtA, i, uint64(len(m.AccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Allocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Allocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Allocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpTs != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ExpTs))
		i--
		dAtA[i] = 0x18
	}
	if m.ReceiverAccType != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ReceiverAccType))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Receiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Receiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Receiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if m.RecType != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RecType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardCommon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.CampaignUID)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.TS != 0 {
		n += 1 + sovReward(uint64(m.TS))
	}
	return n
}

func (m *Definition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceiverType != 0 {
		n += 1 + sovReward(uint64(m.ReceiverType))
	}
	l = m.Amount.Size()
	n += 1 + l + sovReward(uint64(l))
	if m.DstAccType != 0 {
		n += 1 + sovReward(uint64(m.DstAccType))
	}
	if m.UnlockTS != 0 {
		n += 1 + sovReward(uint64(m.UnlockTS))
	}
	return n
}

func (m *Distribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccAddr)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = m.Allocation.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func (m *Allocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovReward(uint64(l))
	if m.ReceiverAccType != 0 {
		n += 1 + sovReward(uint64(m.ReceiverAccType))
	}
	if m.ExpTs != 0 {
		n += 1 + sovReward(uint64(m.ExpTs))
	}
	return n
}

func (m *Receiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecType != 0 {
		n += 1 + sovReward(uint64(m.RecType))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}

func sovReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReward(x uint64) (n int) {
	return sovReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TS", wireType)
			}
			m.TS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Definition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Definition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Definition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverType", wireType)
			}
			m.ReceiverType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverType |= ReceiverType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAccType", wireType)
			}
			m.DstAccType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstAccType |= ReceiverAccType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTS", wireType)
			}
			m.UnlockTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Distribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Distribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Distribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Allocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Allocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Allocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAccType", wireType)
			}
			m.ReceiverAccType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverAccType |= ReceiverAccType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpTs", wireType)
			}
			m.ExpTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Receiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Receiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Receiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			m.RecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecType |= ReceiverType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReward = fmt.Errorf("proto: unexpected end of group")
)
