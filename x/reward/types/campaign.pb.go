// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/reward/campaign.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Campaign is type for defining the campaign properties.
type Campaign struct {
	// creator is the address of campaign creator.
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// uid is the unique identifier of a campaign.
	UID string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid"`
	// promoter is the address of campaign promoter.
	// Funds for the campaign would be deducted from this account.
	Promoter string `protobuf:"bytes,3,opt,name=promoter,proto3" json:"promoter,omitempty"`
	// start_ts is the start timestamp of a campaign.
	StartTS uint64 `protobuf:"varint,4,opt,name=start_ts,proto3" json:"start_ts"`
	// end_ts is the end timestamp of a campaign.
	EndTS uint64 `protobuf:"varint,5,opt,name=end_ts,proto3" json:"end_ts"`
	// reward_category is the category of reward.
	RewardCategory RewardCategory `protobuf:"varint,6,opt,name=reward_category,json=rewardCategory,proto3,enum=sgenetwork.sge.reward.RewardCategory" json:"reward_category,omitempty"`
	// reward_type is the type of reward.
	RewardType RewardType `protobuf:"varint,7,opt,name=reward_type,json=rewardType,proto3,enum=sgenetwork.sge.reward.RewardType" json:"reward_type,omitempty"`
	// amount_type is the type of reward amount.
	RewardAmountType RewardAmountType `protobuf:"varint,8,opt,name=reward_amount_type,json=rewardAmountType,proto3,enum=sgenetwork.sge.reward.RewardAmountType" json:"reward_amount_type,omitempty"`
	// reward_amount is the amount defined for a reward.
	RewardAmount *RewardAmount `protobuf:"bytes,9,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`
	// pool is the tracker of campaign funds.
	Pool Pool `protobuf:"bytes,10,opt,name=pool,proto3" json:"pool"`
	// is_active is the flag to check if the campaign is active or not.
	IsActive bool `protobuf:"varint,11,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// meta is the metadata of the campaign.
	// It is a stringified base64 encoded json.
	Meta string `protobuf:"bytes,13,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *Campaign) Reset()         { *m = Campaign{} }
func (m *Campaign) String() string { return proto.CompactTextString(m) }
func (*Campaign) ProtoMessage()    {}
func (*Campaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d1d1b3139567e36, []int{0}
}
func (m *Campaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Campaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Campaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Campaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Campaign.Merge(m, src)
}
func (m *Campaign) XXX_Size() int {
	return m.Size()
}
func (m *Campaign) XXX_DiscardUnknown() {
	xxx_messageInfo_Campaign.DiscardUnknown(m)
}

var xxx_messageInfo_Campaign proto.InternalMessageInfo

func (m *Campaign) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Campaign) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Campaign) GetPromoter() string {
	if m != nil {
		return m.Promoter
	}
	return ""
}

func (m *Campaign) GetStartTS() uint64 {
	if m != nil {
		return m.StartTS
	}
	return 0
}

func (m *Campaign) GetEndTS() uint64 {
	if m != nil {
		return m.EndTS
	}
	return 0
}

func (m *Campaign) GetRewardCategory() RewardCategory {
	if m != nil {
		return m.RewardCategory
	}
	return RewardCategory_REWARD_CATEGORY_UNSPECIFIED
}

func (m *Campaign) GetRewardType() RewardType {
	if m != nil {
		return m.RewardType
	}
	return RewardType_REWARD_TYPE_UNSPECIFIED
}

func (m *Campaign) GetRewardAmountType() RewardAmountType {
	if m != nil {
		return m.RewardAmountType
	}
	return RewardAmountType_REWARD_AMOUNT_TYPE_UNSPECIFIED
}

func (m *Campaign) GetRewardAmount() *RewardAmount {
	if m != nil {
		return m.RewardAmount
	}
	return nil
}

func (m *Campaign) GetPool() Pool {
	if m != nil {
		return m.Pool
	}
	return Pool{}
}

func (m *Campaign) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Campaign) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

// Pool tracks funds assigned and spent to/for a campaign.
type Pool struct {
	Total cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total,proto3,customtype=cosmossdk.io/math.Int" json:"total" yaml:"total"`
	Spent cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=spent,proto3,customtype=cosmossdk.io/math.Int" json:"spent" yaml:"spent"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d1d1b3139567e36, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Campaign)(nil), "sgenetwork.sge.reward.Campaign")
	proto.RegisterType((*Pool)(nil), "sgenetwork.sge.reward.Pool")
}

func init() { proto.RegisterFile("sge/reward/campaign.proto", fileDescriptor_6d1d1b3139567e36) }

var fileDescriptor_6d1d1b3139567e36 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x6b, 0x9a, 0xb6, 0xa9, 0xbb, 0x15, 0x64, 0x98, 0x66, 0x3a, 0x29, 0x09, 0x45, 0x88,
	0x22, 0xb4, 0x44, 0xda, 0xc4, 0x85, 0xdb, 0x52, 0x90, 0xd8, 0x05, 0x21, 0x6f, 0xbb, 0x70, 0xa9,
	0xbc, 0xd4, 0xca, 0xa2, 0x35, 0x71, 0x64, 0xbb, 0x8c, 0x7e, 0x8b, 0x7d, 0xac, 0x1d, 0x77, 0x44,
	0x1c, 0x22, 0x48, 0x6f, 0x3b, 0xf2, 0x09, 0x90, 0x9d, 0xac, 0xda, 0x10, 0x9b, 0x76, 0xc9, 0xfb,
	0xef, 0x79, 0x7e, 0x52, 0xec, 0xd7, 0xf0, 0xb9, 0x8c, 0x59, 0x20, 0xd8, 0x19, 0x15, 0xd3, 0x20,
	0xa2, 0x69, 0x4e, 0x93, 0x38, 0xf3, 0x73, 0xc1, 0x15, 0x47, 0x1b, 0x32, 0x66, 0x19, 0x53, 0x67,
	0x5c, 0x9c, 0xfa, 0x32, 0x66, 0x7e, 0xa5, 0x1a, 0x3c, 0x8b, 0x79, 0xcc, 0x8d, 0x22, 0xd0, 0x59,
	0x25, 0x1e, 0x6c, 0xde, 0xe0, 0x54, 0xa1, 0x1a, 0x0c, 0x7f, 0x5b, 0xd0, 0x1e, 0xd7, 0x60, 0x84,
	0x61, 0x27, 0x12, 0x8c, 0x2a, 0x2e, 0x30, 0xf0, 0xc0, 0xa8, 0x4b, 0xae, 0x4b, 0xe4, 0xc1, 0xe6,
	0x3c, 0x99, 0xe2, 0x47, 0xba, 0x1b, 0xf6, 0xcb, 0xc2, 0x6d, 0x1e, 0xed, 0x7f, 0xb8, 0x2a, 0x5c,
	0xdd, 0x25, 0xfa, 0x83, 0x06, 0xd0, 0xce, 0x05, 0x4f, 0xb9, 0x62, 0x02, 0x37, 0x8d, 0x79, 0x55,
	0xa3, 0x5d, 0x68, 0x4b, 0x45, 0x85, 0x9a, 0x28, 0x89, 0x2d, 0x0f, 0x8c, 0xac, 0x70, 0xb3, 0x2c,
	0xdc, 0xce, 0x81, 0xee, 0x1d, 0x1e, 0x5c, 0x15, 0xee, 0x6a, 0x4c, 0x56, 0x19, 0x7a, 0x0b, 0xdb,
	0x2c, 0x9b, 0x6a, 0x4b, 0xcb, 0x58, 0x9e, 0x96, 0x85, 0xdb, 0xfa, 0x98, 0x4d, 0x8d, 0xa1, 0x1e,
	0x91, 0x3a, 0xa2, 0xcf, 0xf0, 0x71, 0xf5, 0x5b, 0x93, 0x88, 0x2a, 0x16, 0x73, 0xb1, 0xc0, 0x6d,
	0x0f, 0x8c, 0xfa, 0x3b, 0xaf, 0xfc, 0xff, 0x1e, 0x93, 0x4f, 0x4c, 0x18, 0xd7, 0x62, 0xd2, 0x17,
	0xb7, 0x6a, 0x14, 0xc2, 0x5e, 0xcd, 0x53, 0x8b, 0x9c, 0xe1, 0x8e, 0x61, 0xbd, 0xb8, 0x97, 0x75,
	0xb8, 0xc8, 0x19, 0x81, 0x62, 0x95, 0xa3, 0x23, 0x88, 0x6a, 0x06, 0x4d, 0xf9, 0x3c, 0x53, 0x15,
	0xca, 0x36, 0xa8, 0xd7, 0xf7, 0xa2, 0xf6, 0x8c, 0xde, 0x00, 0x9f, 0x88, 0x7f, 0x3a, 0xe8, 0x13,
	0x5c, 0xbf, 0x85, 0xc5, 0x5d, 0x0f, 0x8c, 0x7a, 0x3b, 0x2f, 0x1f, 0x40, 0x24, 0x6b, 0x37, 0x69,
	0xe8, 0x1d, 0xb4, 0x72, 0xce, 0x67, 0x18, 0x1a, 0xc0, 0xd6, 0x1d, 0x80, 0x2f, 0x9c, 0xcf, 0x42,
	0xeb, 0xa2, 0x70, 0x1b, 0xc4, 0xc8, 0xd1, 0x16, 0xec, 0x26, 0x72, 0x42, 0x23, 0x95, 0x7c, 0x63,
	0xb8, 0xe7, 0x81, 0x91, 0x4d, 0xec, 0x44, 0xee, 0x99, 0x1a, 0x21, 0x68, 0xa5, 0x4c, 0x51, 0xbc,
	0x6e, 0x56, 0xc0, 0xe4, 0xc3, 0x73, 0x00, 0x2d, 0x4d, 0x41, 0x63, 0xd8, 0x52, 0x5c, 0xd1, 0x59,
	0xb5, 0x5d, 0xe1, 0xb6, 0x86, 0xfe, 0x2c, 0xdc, 0x8d, 0x88, 0xcb, 0x94, 0x4b, 0x39, 0x3d, 0xf5,
	0x13, 0x1e, 0xa4, 0x54, 0x9d, 0xf8, 0xfb, 0x99, 0xfa, 0x53, 0xb8, 0x6b, 0x0b, 0x9a, 0xce, 0xde,
	0x0f, 0x8d, 0x67, 0x48, 0x2a, 0xaf, 0x86, 0xc8, 0x9c, 0x65, 0xaa, 0x5e, 0xc6, 0x87, 0x42, 0x8c,
	0x67, 0x48, 0x2a, 0x6f, 0x38, 0xbe, 0x28, 0x1d, 0x70, 0x59, 0x3a, 0xe0, 0x57, 0xe9, 0x80, 0xf3,
	0xa5, 0xd3, 0xb8, 0x5c, 0x3a, 0x8d, 0x1f, 0x4b, 0xa7, 0xf1, 0xf5, 0x4d, 0x9c, 0xa8, 0x93, 0xf9,
	0xb1, 0x1f, 0xf1, 0x34, 0x90, 0x31, 0xdb, 0xae, 0x4f, 0x44, 0xe7, 0xc1, 0xf7, 0xeb, 0x27, 0xa4,
	0x6f, 0x52, 0x1e, 0xb7, 0xcd, 0x13, 0xda, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xcd, 0xa3,
	0x61, 0xa5, 0x03, 0x00, 0x00,
}

func (m *Campaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Campaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Campaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCampaign(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.RewardAmount != nil {
		{
			size, err := m.RewardAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampaign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.RewardAmountType != 0 {
		i = encodeVarintCampaign(dAtA, i, uint64(m.RewardAmountType))
		i--
		dAtA[i] = 0x40
	}
	if m.RewardType != 0 {
		i = encodeVarintCampaign(dAtA, i, uint64(m.RewardType))
		i--
		dAtA[i] = 0x38
	}
	if m.RewardCategory != 0 {
		i = encodeVarintCampaign(dAtA, i, uint64(m.RewardCategory))
		i--
		dAtA[i] = 0x30
	}
	if m.EndTS != 0 {
		i = encodeVarintCampaign(dAtA, i, uint64(m.EndTS))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTS != 0 {
		i = encodeVarintCampaign(dAtA, i, uint64(m.StartTS))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Promoter) > 0 {
		i -= len(m.Promoter)
		copy(dAtA[i:], m.Promoter)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Promoter)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Spent.Size()
		i -= size
		if _, err := m.Spent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCampaign(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCampaign(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCampaign(dAtA []byte, offset int, v uint64) int {
	offset -= sovCampaign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Campaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.Promoter)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.StartTS != 0 {
		n += 1 + sovCampaign(uint64(m.StartTS))
	}
	if m.EndTS != 0 {
		n += 1 + sovCampaign(uint64(m.EndTS))
	}
	if m.RewardCategory != 0 {
		n += 1 + sovCampaign(uint64(m.RewardCategory))
	}
	if m.RewardType != 0 {
		n += 1 + sovCampaign(uint64(m.RewardType))
	}
	if m.RewardAmountType != 0 {
		n += 1 + sovCampaign(uint64(m.RewardAmountType))
	}
	if m.RewardAmount != nil {
		l = m.RewardAmount.Size()
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = m.Pool.Size()
	n += 1 + l + sovCampaign(uint64(l))
	if m.IsActive {
		n += 2
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Total.Size()
	n += 1 + l + sovCampaign(uint64(l))
	l = m.Spent.Size()
	n += 1 + l + sovCampaign(uint64(l))
	return n
}

func sovCampaign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCampaign(x uint64) (n int) {
	return sovCampaign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Campaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Campaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Campaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promoter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Promoter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTS", wireType)
			}
			m.StartTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTS", wireType)
			}
			m.EndTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCategory", wireType)
			}
			m.RewardCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardCategory |= RewardCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardType", wireType)
			}
			m.RewardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardType |= RewardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmountType", wireType)
			}
			m.RewardAmountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardAmountType |= RewardAmountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardAmount == nil {
				m.RewardAmount = &RewardAmount{}
			}
			if err := m.RewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCampaign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCampaign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCampaign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCampaign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCampaign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCampaign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCampaign = fmt.Errorf("proto: unexpected end of group")
)
