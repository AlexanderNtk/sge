// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/subaccount/subaccount.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Balance defines the balance of a subaccount.
type Balance struct {
	// deposited_amount keeps track of how much was deposited so far in the
	// subaccount.
	DepositedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=deposited_amount,json=depositedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposited_amount"`
	// spent_amount keeps track of how much was spent in the account in betting,
	// house, staking, etc.
	SpentAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=spent_amount,json=spentAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"spent_amount"`
	// withdrawn_amount keeps track of how much was withdrawn in the account after
	// locked coins become free.
	WithdrawmAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=withdrawm_amount,json=withdrawmAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"withdrawm_amount"`
	// lost_amount keeps track of the amounts that were lost due to betting
	// losses, slashing etc.
	LostAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=lost_amount,json=lostAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"lost_amount"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_830925203d624e84, []int{0}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(m, src)
}
func (m *Balance) XXX_Size() int {
	return m.Size()
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

// LockedBalance defines a balance which is locked.
type LockedBalance struct {
	UnlockTime time.Time                              `protobuf:"bytes,1,opt,name=unlock_time,json=unlockTime,proto3,stdtime" json:"unlock_time"`
	Amount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *LockedBalance) Reset()         { *m = LockedBalance{} }
func (m *LockedBalance) String() string { return proto.CompactTextString(m) }
func (*LockedBalance) ProtoMessage()    {}
func (*LockedBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_830925203d624e84, []int{1}
}
func (m *LockedBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedBalance.Merge(m, src)
}
func (m *LockedBalance) XXX_Size() int {
	return m.Size()
}
func (m *LockedBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedBalance.DiscardUnknown(m)
}

var xxx_messageInfo_LockedBalance proto.InternalMessageInfo

func (m *LockedBalance) GetUnlockTime() time.Time {
	if m != nil {
		return m.UnlockTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*Balance)(nil), "sgenetwork.sge.subaccount.Balance")
	proto.RegisterType((*LockedBalance)(nil), "sgenetwork.sge.subaccount.LockedBalance")
}

func init() { proto.RegisterFile("sge/subaccount/subaccount.proto", fileDescriptor_830925203d624e84) }

var fileDescriptor_830925203d624e84 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0xd2, 0xcf, 0x4a, 0xf3, 0x40,
	0x10, 0x00, 0xf0, 0xa4, 0xdf, 0x47, 0xd5, 0x8d, 0x62, 0x09, 0x1e, 0xb4, 0x87, 0x44, 0x7a, 0x10,
	0x2f, 0xdd, 0x05, 0x7d, 0x02, 0x03, 0x2a, 0x82, 0x20, 0x16, 0x2f, 0xf5, 0x52, 0x92, 0xcd, 0xba,
	0x0d, 0xf9, 0x33, 0xa1, 0xbb, 0xa1, 0xfa, 0x16, 0x7d, 0x02, 0x9f, 0xa7, 0xc7, 0x1e, 0xc5, 0x43,
	0x95, 0xe6, 0x45, 0x64, 0x37, 0x49, 0xed, 0xb9, 0x9e, 0x32, 0x21, 0x33, 0xbf, 0x0c, 0x33, 0x83,
	0x5c, 0xc1, 0x19, 0x11, 0x45, 0xe0, 0x53, 0x0a, 0x45, 0x26, 0x37, 0x42, 0x9c, 0x4f, 0x40, 0x82,
	0x7d, 0x22, 0x38, 0xcb, 0x98, 0x9c, 0xc2, 0x24, 0xc6, 0x82, 0x33, 0xfc, 0x9b, 0xd0, 0x3d, 0xe2,
	0xc0, 0x41, 0x67, 0x11, 0x15, 0x55, 0x05, 0x5d, 0x97, 0x03, 0xf0, 0x84, 0x11, 0xfd, 0x16, 0x14,
	0x2f, 0x44, 0x46, 0x29, 0x13, 0xd2, 0x4f, 0xf3, 0x2a, 0xa1, 0x57, 0xb6, 0xd0, 0x8e, 0xe7, 0x27,
	0x7e, 0x46, 0x99, 0x3d, 0x44, 0x9d, 0x90, 0xe5, 0x20, 0x22, 0xc9, 0xc2, 0x91, 0x9f, 0x2a, 0xf6,
	0xd8, 0x3c, 0x35, 0xcf, 0xf7, 0x3c, 0x3c, 0x5f, 0xba, 0xc6, 0xe7, 0xd2, 0x3d, 0xe3, 0x91, 0x1c,
	0x17, 0x01, 0xa6, 0x90, 0x12, 0x0a, 0x22, 0x05, 0x51, 0x3f, 0xfa, 0x22, 0x8c, 0x89, 0x7c, 0xcb,
	0x99, 0xc0, 0x77, 0x99, 0x1c, 0x1c, 0xae, 0x9d, 0x2b, 0xcd, 0xd8, 0x8f, 0x68, 0x5f, 0xe4, 0x2c,
	0x93, 0x0d, 0xdb, 0xda, 0x8a, 0xb5, 0xb4, 0x51, 0x93, 0x43, 0xd4, 0x99, 0x46, 0x72, 0x1c, 0x4e,
	0xfc, 0x69, 0xda, 0xb0, 0xff, 0xb6, 0xeb, 0x76, 0xed, 0xd4, 0xf4, 0x03, 0xb2, 0x12, 0x10, 0xeb,
	0x66, 0xff, 0x6f, 0xa5, 0x22, 0x45, 0x54, 0x60, 0xef, 0xdd, 0x44, 0x07, 0xf7, 0x40, 0x63, 0x16,
	0x36, 0xb3, 0xbe, 0x46, 0x56, 0x91, 0x25, 0x40, 0xe3, 0x91, 0xda, 0x88, 0x1e, 0xb3, 0x75, 0xd1,
	0xc5, 0xd5, 0xba, 0x70, 0xb3, 0x2e, 0xfc, 0xd4, 0xac, 0xcb, 0xdb, 0x55, 0xbf, 0x9f, 0x7d, 0xb9,
	0xe6, 0x00, 0x55, 0x85, 0xea, 0x93, 0x7d, 0x83, 0xda, 0x7f, 0x9a, 0x68, 0x5d, 0xed, 0xdd, 0xce,
	0x57, 0x8e, 0xb9, 0x58, 0x39, 0xe6, 0xf7, 0xca, 0x31, 0x67, 0xa5, 0x63, 0x2c, 0x4a, 0xc7, 0xf8,
	0x28, 0x1d, 0xe3, 0xb9, 0xbf, 0x21, 0x09, 0xce, 0xfa, 0xf5, 0xf9, 0xa9, 0x98, 0xbc, 0x6e, 0x1e,
	0xab, 0x46, 0x83, 0xb6, 0x6e, 0xfd, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xdf, 0xda, 0x02,
	0xcb, 0x02, 0x00, 0x00,
}

func (m *Balance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Balance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Balance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LostAmount.Size()
		i -= size
		if _, err := m.LostAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSubaccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.WithdrawmAmount.Size()
		i -= size
		if _, err := m.WithdrawmAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSubaccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SpentAmount.Size()
		i -= size
		if _, err := m.SpentAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSubaccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.DepositedAmount.Size()
		i -= size
		if _, err := m.DepositedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSubaccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LockedBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSubaccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnlockTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSubaccount(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSubaccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubaccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Balance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DepositedAmount.Size()
	n += 1 + l + sovSubaccount(uint64(l))
	l = m.SpentAmount.Size()
	n += 1 + l + sovSubaccount(uint64(l))
	l = m.WithdrawmAmount.Size()
	n += 1 + l + sovSubaccount(uint64(l))
	l = m.LostAmount.Size()
	n += 1 + l + sovSubaccount(uint64(l))
	return n
}

func (m *LockedBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnlockTime)
	n += 1 + l + sovSubaccount(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovSubaccount(uint64(l))
	return n
}

func sovSubaccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubaccount(x uint64) (n int) {
	return sovSubaccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Balance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubaccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubaccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpentAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubaccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawmAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubaccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawmAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LostAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubaccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LostAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubaccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubaccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubaccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubaccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubaccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubaccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubaccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubaccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubaccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubaccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubaccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubaccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubaccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubaccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubaccount = fmt.Errorf("proto: unexpected end of group")
)
