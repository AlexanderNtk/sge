// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/subaccount/ticket.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/sge-network/sge/x/bet/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SubAccWagerTicketPayload indicates data of subaccount wager ticket.
type SubAccWagerTicketPayload struct {
	// msg holds normal wager message
	Msg *types.MsgWager `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	// mainacc_deduct_amount is amount to be deducted from main account
	MainaccDeductAmount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=mainacc_deduct_amount,json=mainaccDeductAmount,proto3,customtype=cosmossdk.io/math.Int" json:"mainacc_deduct_amount"`
	// subacc_deduct_amount is amount to be deducted from sub account
	SubaccDeductAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=subacc_deduct_amount,json=subaccDeductAmount,proto3,customtype=cosmossdk.io/math.Int" json:"subacc_deduct_amount"`
}

func (m *SubAccWagerTicketPayload) Reset()         { *m = SubAccWagerTicketPayload{} }
func (m *SubAccWagerTicketPayload) String() string { return proto.CompactTextString(m) }
func (*SubAccWagerTicketPayload) ProtoMessage()    {}
func (*SubAccWagerTicketPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_70127b4abdfb0944, []int{0}
}
func (m *SubAccWagerTicketPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubAccWagerTicketPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubAccWagerTicketPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubAccWagerTicketPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubAccWagerTicketPayload.Merge(m, src)
}
func (m *SubAccWagerTicketPayload) XXX_Size() int {
	return m.Size()
}
func (m *SubAccWagerTicketPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SubAccWagerTicketPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SubAccWagerTicketPayload proto.InternalMessageInfo

func (m *SubAccWagerTicketPayload) GetMsg() *types.MsgWager {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*SubAccWagerTicketPayload)(nil), "sgenetwork.sge.bet.SubAccWagerTicketPayload")
}

func init() { proto.RegisterFile("sge/subaccount/ticket.proto", fileDescriptor_70127b4abdfb0944) }

var fileDescriptor_70127b4abdfb0944 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x1b, 0x07, 0x82, 0xf5, 0x22, 0x71, 0x83, 0x32, 0x35, 0x1b, 0x9e, 0x76, 0x59, 0x02,
	0xfa, 0x09, 0x36, 0x04, 0xf1, 0x20, 0xea, 0x14, 0x04, 0x2f, 0x23, 0x49, 0x43, 0x56, 0x6a, 0x9a,
	0xd1, 0xbc, 0xc5, 0xed, 0x5b, 0xf8, 0xb1, 0x76, 0xdc, 0x51, 0x3c, 0x0c, 0x69, 0xef, 0x7e, 0x06,
	0x69, 0xba, 0x83, 0x7f, 0x2e, 0xde, 0x5e, 0x92, 0xf7, 0xf7, 0x4b, 0x9e, 0x27, 0x3c, 0x72, 0x5a,
	0x31, 0x57, 0x08, 0x2e, 0xa5, 0x2d, 0x32, 0x60, 0x90, 0xc8, 0x54, 0x01, 0x9d, 0xe7, 0x16, 0x2c,
	0xc6, 0x4e, 0xab, 0x4c, 0xc1, 0x8b, 0xcd, 0x53, 0xea, 0xb4, 0xa2, 0x42, 0x41, 0xb7, 0xad, 0xad,
	0xb6, 0xfe, 0x9a, 0xd5, 0x53, 0xb3, 0xd9, 0x3d, 0xa8, 0x35, 0x42, 0x01, 0x83, 0x45, 0x73, 0x72,
	0xfa, 0x89, 0xc2, 0xe8, 0xbe, 0x10, 0x23, 0x29, 0x1f, 0xb9, 0x56, 0xf9, 0x83, 0xf7, 0xde, 0xf2,
	0xe5, 0xb3, 0xe5, 0x31, 0xa6, 0x61, 0xcb, 0x38, 0x1d, 0xa1, 0x3e, 0x1a, 0xec, 0x9f, 0x1d, 0xd3,
	0xbf, 0xcf, 0xd0, 0x6b, 0xa7, 0x3d, 0x37, 0xa9, 0x17, 0xf1, 0x5d, 0xd8, 0x31, 0x3c, 0xc9, 0xb8,
	0x94, 0xd3, 0x58, 0xc5, 0x85, 0x84, 0x29, 0x37, 0xf5, 0x77, 0xa3, 0x9d, 0x3e, 0x1a, 0xec, 0x8d,
	0x4f, 0x56, 0x9b, 0x5e, 0xf0, 0xbe, 0xe9, 0x75, 0xa4, 0x75, 0xc6, 0x3a, 0x17, 0xa7, 0x34, 0xb1,
	0xcc, 0x70, 0x98, 0xd1, 0xab, 0x0c, 0x26, 0x87, 0x5b, 0xf6, 0xc2, 0xa3, 0x23, 0x4f, 0xe2, 0x9b,
	0xb0, 0xdd, 0xc4, 0xfe, 0x65, 0x6c, 0xfd, 0xc7, 0x88, 0x1b, 0xf4, 0xbb, 0x70, 0x7c, 0xb9, 0x2a,
	0x09, 0x5a, 0x97, 0x04, 0x7d, 0x94, 0x04, 0xbd, 0x56, 0x24, 0x58, 0x57, 0x24, 0x78, 0xab, 0x48,
	0xf0, 0x34, 0xd4, 0x09, 0xcc, 0x0a, 0x41, 0xa5, 0x35, 0xcc, 0x69, 0x35, 0xdc, 0x66, 0xad, 0x67,
	0xb6, 0xf8, 0x51, 0xfe, 0x72, 0xae, 0x9c, 0xd8, 0xf5, 0x05, 0x9e, 0x7f, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x93, 0x8b, 0xf6, 0x75, 0x9b, 0x01, 0x00, 0x00,
}

func (m *SubAccWagerTicketPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubAccWagerTicketPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubAccWagerTicketPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SubaccDeductAmount.Size()
		i -= size
		if _, err := m.SubaccDeductAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTicket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MainaccDeductAmount.Size()
		i -= size
		if _, err := m.MainaccDeductAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTicket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTicket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTicket(dAtA []byte, offset int, v uint64) int {
	offset -= sovTicket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubAccWagerTicketPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTicket(uint64(l))
	}
	l = m.MainaccDeductAmount.Size()
	n += 1 + l + sovTicket(uint64(l))
	l = m.SubaccDeductAmount.Size()
	n += 1 + l + sovTicket(uint64(l))
	return n
}

func sovTicket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTicket(x uint64) (n int) {
	return sovTicket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubAccWagerTicketPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubAccWagerTicketPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubAccWagerTicketPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.MsgWager{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainaccDeductAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MainaccDeductAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccDeductAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SubaccDeductAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTicket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTicket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTicket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTicket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTicket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTicket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTicket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTicket = fmt.Errorf("proto: unexpected end of group")
)
