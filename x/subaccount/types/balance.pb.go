// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/subaccount/balance.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Balance type.
type BalanceType int32

const (
	// the invalid or unknown
	BalanceType_BALANCE_TYPE_UNSPECIFIED BalanceType = 0
	// locked
	BalanceType_BALANCE_TYPE_LOCKED BalanceType = 1
	// unlocked
	BalanceType_BALANCE_TYPE_UNLOCKED BalanceType = 2
)

var BalanceType_name = map[int32]string{
	0: "BALANCE_TYPE_UNSPECIFIED",
	1: "BALANCE_TYPE_LOCKED",
	2: "BALANCE_TYPE_UNLOCKED",
}

var BalanceType_value = map[string]int32{
	"BALANCE_TYPE_UNSPECIFIED": 0,
	"BALANCE_TYPE_LOCKED":      1,
	"BALANCE_TYPE_UNLOCKED":    2,
}

func (x BalanceType) String() string {
	return proto.EnumName(BalanceType_name, int32(x))
}

func (BalanceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_19a80bd2939d53e2, []int{0}
}

// AccountSummary defines the balance of a subaccount.
type AccountSummary struct {
	// deposited_amount keeps track of how much was deposited so far in the
	// subaccount.
	DepositedAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=deposited_amount,json=depositedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"deposited_amount"`
	// spent_amount keeps track of how much was spent in the account in betting,
	// house, staking, etc.
	SpentAmount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=spent_amount,json=spentAmount,proto3,customtype=cosmossdk.io/math.Int" json:"spent_amount"`
	// withdrawn_amount keeps track of how much was withdrawn in the account after
	// locked coins become unlocked.
	WithdrawnAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=withdrawn_amount,json=withdrawnAmount,proto3,customtype=cosmossdk.io/math.Int" json:"withdrawn_amount"`
	// lost_amount keeps track of the amounts that were lost due to betting
	// losses, slashing etc.
	LostAmount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=lost_amount,json=lostAmount,proto3,customtype=cosmossdk.io/math.Int" json:"lost_amount"`
}

func (m *AccountSummary) Reset()         { *m = AccountSummary{} }
func (m *AccountSummary) String() string { return proto.CompactTextString(m) }
func (*AccountSummary) ProtoMessage()    {}
func (*AccountSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_19a80bd2939d53e2, []int{0}
}
func (m *AccountSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountSummary.Merge(m, src)
}
func (m *AccountSummary) XXX_Size() int {
	return m.Size()
}
func (m *AccountSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountSummary.DiscardUnknown(m)
}

var xxx_messageInfo_AccountSummary proto.InternalMessageInfo

// LockedBalance defines a balance which is locked.
type LockedBalance struct {
	UnlockTS uint64                `protobuf:"varint,1,opt,name=unlock_ts,proto3" json:"unlock_ts"`
	Amount   cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *LockedBalance) Reset()         { *m = LockedBalance{} }
func (m *LockedBalance) String() string { return proto.CompactTextString(m) }
func (*LockedBalance) ProtoMessage()    {}
func (*LockedBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_19a80bd2939d53e2, []int{1}
}
func (m *LockedBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedBalance.Merge(m, src)
}
func (m *LockedBalance) XXX_Size() int {
	return m.Size()
}
func (m *LockedBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedBalance.DiscardUnknown(m)
}

var xxx_messageInfo_LockedBalance proto.InternalMessageInfo

func (m *LockedBalance) GetUnlockTS() uint64 {
	if m != nil {
		return m.UnlockTS
	}
	return 0
}

func init() {
	proto.RegisterEnum("sgenetwork.sge.subaccount.BalanceType", BalanceType_name, BalanceType_value)
	proto.RegisterType((*AccountSummary)(nil), "sgenetwork.sge.subaccount.AccountSummary")
	proto.RegisterType((*LockedBalance)(nil), "sgenetwork.sge.subaccount.LockedBalance")
}

func init() { proto.RegisterFile("sge/subaccount/balance.proto", fileDescriptor_19a80bd2939d53e2) }

var fileDescriptor_19a80bd2939d53e2 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcb, 0x6e, 0xda, 0x40,
	0x14, 0x86, 0x6d, 0x8a, 0x50, 0x19, 0x7a, 0xb1, 0xa6, 0x45, 0x85, 0x8a, 0xda, 0x15, 0xab, 0xaa,
	0x12, 0xf6, 0xa2, 0xaa, 0xba, 0xab, 0x6a, 0x83, 0x5b, 0x50, 0x11, 0x45, 0x5c, 0x16, 0xcd, 0xc6,
	0xf2, 0x65, 0x64, 0x2c, 0x63, 0x8f, 0xe5, 0x19, 0x8b, 0xb0, 0xca, 0x2b, 0xe4, 0x29, 0xf2, 0x2c,
	0x2c, 0x59, 0x46, 0x59, 0x58, 0x91, 0xd9, 0xe5, 0x29, 0x22, 0x5f, 0x80, 0x24, 0x2b, 0xb2, 0x3b,
	0x9a, 0xf3, 0x7f, 0xdf, 0x1c, 0x1d, 0x1d, 0xd0, 0x22, 0x36, 0x92, 0x48, 0x64, 0xe8, 0xa6, 0x89,
	0x23, 0x9f, 0x4a, 0x86, 0xbe, 0xd4, 0x7d, 0x13, 0x89, 0x41, 0x88, 0x29, 0x86, 0x4d, 0x62, 0x23,
	0x1f, 0xd1, 0x15, 0x0e, 0x5d, 0x91, 0xd8, 0x48, 0x3c, 0x06, 0x3f, 0xbe, 0xb7, 0xb1, 0x8d, 0xb3,
	0x94, 0x94, 0x56, 0x39, 0xd0, 0xbe, 0x2a, 0x81, 0x37, 0x72, 0x9e, 0x98, 0x46, 0x9e, 0xa7, 0x87,
	0x6b, 0xd8, 0x07, 0x9c, 0x85, 0x02, 0x4c, 0x1c, 0x8a, 0x2c, 0x4d, 0xf7, 0xd2, 0x56, 0x83, 0xfd,
	0xcc, 0x7e, 0xa9, 0x2a, 0x9f, 0x36, 0xb1, 0xc0, 0xdc, 0xc4, 0x42, 0xdd, 0xc4, 0xc4, 0xc3, 0x84,
	0x58, 0xae, 0xe8, 0x60, 0xc9, 0xd3, 0xe9, 0x42, 0x1c, 0xf8, 0x74, 0xf2, 0xf6, 0x80, 0xc9, 0x19,
	0x05, 0x7f, 0x81, 0x57, 0x24, 0x40, 0x3e, 0xdd, 0x5b, 0x4a, 0xa7, 0x58, 0x6a, 0x19, 0x52, 0x18,
	0xfa, 0x80, 0x5b, 0x39, 0x74, 0x61, 0x85, 0xfa, 0xca, 0xdf, 0x5b, 0x5e, 0x9c, 0x34, 0xcb, 0x01,
	0x2b, 0x4c, 0x3f, 0x41, 0x6d, 0x89, 0xc9, 0x61, 0x94, 0xf2, 0x29, 0x12, 0x90, 0x12, 0x39, 0xdf,
	0xbe, 0x00, 0xaf, 0x87, 0xd8, 0x74, 0x91, 0xa5, 0xe4, 0x0b, 0x87, 0x3f, 0x40, 0x35, 0xf2, 0x97,
	0xd8, 0x74, 0x35, 0x4a, 0xb2, 0xfd, 0x94, 0x95, 0x66, 0x12, 0x0b, 0x2f, 0xe7, 0xd9, 0xe3, 0x6c,
	0x7a, 0x17, 0x0b, 0xc7, 0xc0, 0xe4, 0x58, 0xc2, 0xef, 0xa0, 0xf2, 0x9c, 0x7d, 0x14, 0xe1, 0xaf,
	0x1a, 0xa8, 0x15, 0x5f, 0xcf, 0xd6, 0x01, 0x82, 0x2d, 0xd0, 0x50, 0xe4, 0xa1, 0x3c, 0xea, 0xaa,
	0xda, 0xec, 0xff, 0x58, 0xd5, 0xe6, 0xa3, 0xe9, 0x58, 0xed, 0x0e, 0x7e, 0x0f, 0xd4, 0x1e, 0xc7,
	0xc0, 0x0f, 0xe0, 0xdd, 0xa3, 0xee, 0xf0, 0x5f, 0xf7, 0xaf, 0xda, 0xe3, 0x58, 0xd8, 0x04, 0xf5,
	0x27, 0x58, 0xd1, 0x2a, 0x29, 0x7f, 0x36, 0x09, 0xcf, 0x6e, 0x13, 0x9e, 0xbd, 0x4d, 0x78, 0xf6,
	0x72, 0xc7, 0x33, 0xdb, 0x1d, 0xcf, 0x5c, 0xef, 0x78, 0xe6, 0xac, 0x63, 0x3b, 0x74, 0x11, 0x19,
	0xa2, 0x89, 0x3d, 0x89, 0xd8, 0xa8, 0x53, 0x5c, 0x58, 0x5a, 0x4b, 0xe7, 0x0f, 0x8f, 0x91, 0xae,
	0x03, 0x44, 0x8c, 0x4a, 0x76, 0x5a, 0xdf, 0xee, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x34, 0xf9,
	0xa7, 0xab, 0x02, 0x00, 0x00,
}

func (m *AccountSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LostAmount.Size()
		i -= size
		if _, err := m.LostAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBalance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.WithdrawnAmount.Size()
		i -= size
		if _, err := m.WithdrawnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBalance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SpentAmount.Size()
		i -= size
		if _, err := m.SpentAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBalance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.DepositedAmount.Size()
		i -= size
		if _, err := m.DepositedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBalance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LockedBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBalance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.UnlockTS != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.UnlockTS))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBalance(dAtA []byte, offset int, v uint64) int {
	offset -= sovBalance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DepositedAmount.Size()
	n += 1 + l + sovBalance(uint64(l))
	l = m.SpentAmount.Size()
	n += 1 + l + sovBalance(uint64(l))
	l = m.WithdrawnAmount.Size()
	n += 1 + l + sovBalance(uint64(l))
	l = m.LostAmount.Size()
	n += 1 + l + sovBalance(uint64(l))
	return n
}

func (m *LockedBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnlockTS != 0 {
		n += 1 + sovBalance(uint64(m.UnlockTS))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBalance(uint64(l))
	return n
}

func sovBalance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBalance(x uint64) (n int) {
	return sovBalance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpentAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LostAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LostAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTS", wireType)
			}
			m.UnlockTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBalance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBalance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBalance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBalance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBalance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBalance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBalance = fmt.Errorf("proto: unexpected end of group")
)
