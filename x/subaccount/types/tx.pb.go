// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/subaccount/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/sge-network/sge/x/bet/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateSubAccount defines the Msg/CreateSubAccount request type.
type MsgCreateSubAccount struct {
	// sender is the msg signer.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// sub_account_owner is the owner of the subaccount.
	SubAccountOwner string `protobuf:"bytes,2,opt,name=sub_account_owner,json=subAccountOwner,proto3" json:"sub_account_owner,omitempty"`
	// locked_balances is the list of balance locks.
	LockedBalances []*LockedBalance `protobuf:"bytes,3,rep,name=locked_balances,json=lockedBalances,proto3" json:"locked_balances,omitempty"`
}

func (m *MsgCreateSubAccount) Reset()         { *m = MsgCreateSubAccount{} }
func (m *MsgCreateSubAccount) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubAccount) ProtoMessage()    {}
func (*MsgCreateSubAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e042e836d366badb, []int{0}
}
func (m *MsgCreateSubAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubAccount.Merge(m, src)
}
func (m *MsgCreateSubAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubAccount proto.InternalMessageInfo

func (m *MsgCreateSubAccount) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCreateSubAccount) GetSubAccountOwner() string {
	if m != nil {
		return m.SubAccountOwner
	}
	return ""
}

func (m *MsgCreateSubAccount) GetLockedBalances() []*LockedBalance {
	if m != nil {
		return m.LockedBalances
	}
	return nil
}

// MsgCreateAccountResponse defines the Msg/CreateAccount response type.
type MsgCreateSubAccountResponse struct {
}

func (m *MsgCreateSubAccountResponse) Reset()         { *m = MsgCreateSubAccountResponse{} }
func (m *MsgCreateSubAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubAccountResponse) ProtoMessage()    {}
func (*MsgCreateSubAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e042e836d366badb, []int{1}
}
func (m *MsgCreateSubAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubAccountResponse.Merge(m, src)
}
func (m *MsgCreateSubAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubAccountResponse proto.InternalMessageInfo

// MsgTopUp defines the Msg/TopUp request type.
type MsgTopUp struct {
	// sender is the msg signer.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// sub_account is the subaccount address.
	SubAccount string `protobuf:"bytes,2,opt,name=sub_account,json=subAccount,proto3" json:"sub_account,omitempty"`
	// locked_balances is the list of balance locks.
	LockedBalances []*LockedBalance `protobuf:"bytes,3,rep,name=locked_balances,json=lockedBalances,proto3" json:"locked_balances,omitempty"`
}

func (m *MsgTopUp) Reset()         { *m = MsgTopUp{} }
func (m *MsgTopUp) String() string { return proto.CompactTextString(m) }
func (*MsgTopUp) ProtoMessage()    {}
func (*MsgTopUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e042e836d366badb, []int{2}
}
func (m *MsgTopUp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopUp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopUp.Merge(m, src)
}
func (m *MsgTopUp) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopUp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopUp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopUp proto.InternalMessageInfo

func (m *MsgTopUp) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTopUp) GetSubAccount() string {
	if m != nil {
		return m.SubAccount
	}
	return ""
}

func (m *MsgTopUp) GetLockedBalances() []*LockedBalance {
	if m != nil {
		return m.LockedBalances
	}
	return nil
}

// MsgTopUpResponse defines the Msg/TopUp response type.
type MsgTopUpResponse struct {
}

func (m *MsgTopUpResponse) Reset()         { *m = MsgTopUpResponse{} }
func (m *MsgTopUpResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTopUpResponse) ProtoMessage()    {}
func (*MsgTopUpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e042e836d366badb, []int{3}
}
func (m *MsgTopUpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopUpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopUpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopUpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopUpResponse.Merge(m, src)
}
func (m *MsgTopUpResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopUpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopUpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopUpResponse proto.InternalMessageInfo

// MsgWithdrawUnlockedBalances defines the Msg/WithdrawUnlockedBalances request type.
type MsgWithdrawUnlockedBalances struct {
	// sender is the subaccount owner.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgWithdrawUnlockedBalances) Reset()         { *m = MsgWithdrawUnlockedBalances{} }
func (m *MsgWithdrawUnlockedBalances) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawUnlockedBalances) ProtoMessage()    {}
func (*MsgWithdrawUnlockedBalances) Descriptor() ([]byte, []int) {
	return fileDescriptor_e042e836d366badb, []int{4}
}
func (m *MsgWithdrawUnlockedBalances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawUnlockedBalances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawUnlockedBalances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawUnlockedBalances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawUnlockedBalances.Merge(m, src)
}
func (m *MsgWithdrawUnlockedBalances) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawUnlockedBalances) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawUnlockedBalances.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawUnlockedBalances proto.InternalMessageInfo

func (m *MsgWithdrawUnlockedBalances) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgWithdrawUnlockedBalancesResponse defines the Msg/WithdrawUnlockedBalances response type.
type MsgWithdrawUnlockedBalancesResponse struct {
}

func (m *MsgWithdrawUnlockedBalancesResponse) Reset()         { *m = MsgWithdrawUnlockedBalancesResponse{} }
func (m *MsgWithdrawUnlockedBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawUnlockedBalancesResponse) ProtoMessage()    {}
func (*MsgWithdrawUnlockedBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e042e836d366badb, []int{5}
}
func (m *MsgWithdrawUnlockedBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawUnlockedBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawUnlockedBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawUnlockedBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawUnlockedBalancesResponse.Merge(m, src)
}
func (m *MsgWithdrawUnlockedBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawUnlockedBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawUnlockedBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawUnlockedBalancesResponse proto.InternalMessageInfo

// MsgPlaceBet wraps the MsgPlaceBet message. We need it in order not to have double interface registration conflicts.
type MsgPlaceBet struct {
	Msg *types.MsgPlaceBet `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *MsgPlaceBet) Reset()         { *m = MsgPlaceBet{} }
func (m *MsgPlaceBet) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceBet) ProtoMessage()    {}
func (*MsgPlaceBet) Descriptor() ([]byte, []int) {
	return fileDescriptor_e042e836d366badb, []int{6}
}
func (m *MsgPlaceBet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceBet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceBet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceBet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceBet.Merge(m, src)
}
func (m *MsgPlaceBet) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceBet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceBet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceBet proto.InternalMessageInfo

func (m *MsgPlaceBet) GetMsg() *types.MsgPlaceBet {
	if m != nil {
		return m.Msg
	}
	return nil
}

// MsgBetResponse wraps the MsgPlaceBetResponse message. We need it in order not to have double interface registration conflicts.
type MsgPlaceBetResponse struct {
	Response *types.MsgPlaceBetResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *MsgPlaceBetResponse) Reset()         { *m = MsgPlaceBetResponse{} }
func (m *MsgPlaceBetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceBetResponse) ProtoMessage()    {}
func (*MsgPlaceBetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e042e836d366badb, []int{7}
}
func (m *MsgPlaceBetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceBetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceBetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceBetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceBetResponse.Merge(m, src)
}
func (m *MsgPlaceBetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceBetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceBetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceBetResponse proto.InternalMessageInfo

func (m *MsgPlaceBetResponse) GetResponse() *types.MsgPlaceBetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgCreateSubAccount)(nil), "sgenetwork.sge.subaccount.MsgCreateSubAccount")
	proto.RegisterType((*MsgCreateSubAccountResponse)(nil), "sgenetwork.sge.subaccount.MsgCreateSubAccountResponse")
	proto.RegisterType((*MsgTopUp)(nil), "sgenetwork.sge.subaccount.MsgTopUp")
	proto.RegisterType((*MsgTopUpResponse)(nil), "sgenetwork.sge.subaccount.MsgTopUpResponse")
	proto.RegisterType((*MsgWithdrawUnlockedBalances)(nil), "sgenetwork.sge.subaccount.MsgWithdrawUnlockedBalances")
	proto.RegisterType((*MsgWithdrawUnlockedBalancesResponse)(nil), "sgenetwork.sge.subaccount.MsgWithdrawUnlockedBalancesResponse")
	proto.RegisterType((*MsgPlaceBet)(nil), "sgenetwork.sge.subaccount.MsgPlaceBet")
	proto.RegisterType((*MsgPlaceBetResponse)(nil), "sgenetwork.sge.subaccount.MsgPlaceBetResponse")
}

func init() { proto.RegisterFile("sge/subaccount/tx.proto", fileDescriptor_e042e836d366badb) }

var fileDescriptor_e042e836d366badb = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x41, 0x6b, 0x13, 0x41,
	0x18, 0x86, 0xb3, 0x2e, 0x96, 0xf8, 0x05, 0x6c, 0x5c, 0x41, 0xe3, 0x8a, 0x9b, 0xb2, 0x45, 0x0d,
	0x4a, 0x27, 0x18, 0xd1, 0xa3, 0x68, 0x7a, 0xf0, 0x62, 0x50, 0x57, 0x8b, 0xd8, 0x4b, 0xd8, 0xd9,
	0x7c, 0x4c, 0x4b, 0xd3, 0x9d, 0x65, 0xbf, 0x59, 0x52, 0xfd, 0x15, 0xe2, 0xc1, 0x5f, 0xe1, 0x0f,
	0xf1, 0xd8, 0x8b, 0xe0, 0x51, 0x92, 0x3f, 0x22, 0xd9, 0x4c, 0x26, 0x69, 0xed, 0x6e, 0xa3, 0xd0,
	0xdb, 0xcc, 0xf0, 0xbc, 0xef, 0xbe, 0xef, 0xce, 0xc7, 0xc0, 0x4d, 0x12, 0xd8, 0xa6, 0x8c, 0x87,
	0x51, 0x24, 0xb3, 0x58, 0xb5, 0xd5, 0x11, 0x4b, 0x52, 0xa9, 0xa4, 0x73, 0x8b, 0x04, 0xc6, 0xa8,
	0x46, 0x32, 0x3d, 0x60, 0x24, 0x90, 0x2d, 0x18, 0xb7, 0x79, 0x4a, 0xb3, 0x58, 0xce, 0xb4, 0x6e,
	0x7d, 0x0a, 0x70, 0x5c, 0xb8, 0xf9, 0xdf, 0x2d, 0xb8, 0xde, 0x23, 0xb1, 0x9d, 0x62, 0xa8, 0xf0,
	0x5d, 0xc6, 0x5f, 0xcc, 0x78, 0xe7, 0x06, 0xac, 0x11, 0xc6, 0x03, 0x4c, 0x1b, 0xd6, 0x86, 0xd5,
	0xba, 0x12, 0xe8, 0x9d, 0xf3, 0x00, 0xae, 0x51, 0xc6, 0xfb, 0xda, 0xb6, 0x2f, 0x47, 0x31, 0xa6,
	0x8d, 0x4b, 0x39, 0xb2, 0x4e, 0x46, 0xfe, 0x7a, 0x7a, 0xec, 0xbc, 0x85, 0xf5, 0xa1, 0x8c, 0x0e,
	0x70, 0xd0, 0xe7, 0xe1, 0x30, 0x8c, 0x23, 0xa4, 0x86, 0xbd, 0x61, 0xb7, 0x6a, 0x9d, 0x16, 0x2b,
	0xec, 0xc0, 0x5e, 0xe5, 0x8a, 0xee, 0x4c, 0x10, 0x5c, 0x1d, 0x2e, 0x6f, 0xc9, 0xbf, 0x03, 0xb7,
	0xcf, 0x48, 0x1b, 0x20, 0x25, 0x32, 0x26, 0xf4, 0xbf, 0x59, 0x50, 0xed, 0x91, 0x78, 0x2f, 0x93,
	0x9d, 0xa4, 0xb0, 0x42, 0x13, 0x6a, 0x4b, 0x15, 0x74, 0x78, 0x58, 0x84, 0xbf, 0x88, 0xdc, 0x0e,
	0xd4, 0xe7, 0xb9, 0x4c, 0xd8, 0x27, 0x79, 0x97, 0x0f, 0xfb, 0x6a, 0x6f, 0x90, 0x86, 0xa3, 0x9d,
	0xf8, 0xa4, 0xa4, 0x28, 0xbe, 0x7f, 0x17, 0x36, 0x4b, 0x64, 0xc6, 0xfd, 0x39, 0xd4, 0x7a, 0x24,
	0xde, 0x0c, 0xc3, 0x08, 0xbb, 0xa8, 0x9c, 0x47, 0x60, 0x1f, 0x92, 0xc8, 0xad, 0x6a, 0x9d, 0xe6,
	0xe9, 0x1e, 0x1c, 0x15, 0x5b, 0xa2, 0x83, 0x29, 0xeb, 0xef, 0xe6, 0x93, 0x61, 0xce, 0xb4, 0xb1,
	0xb3, 0x0d, 0xd5, 0x54, 0xaf, 0xb5, 0xdd, 0xfd, 0xf3, 0xec, 0x34, 0x1e, 0x18, 0x61, 0xe7, 0xa7,
	0x0d, 0x76, 0x8f, 0x84, 0xf3, 0x19, 0xea, 0x7f, 0x8d, 0x1e, 0x2b, 0xf9, 0xcb, 0x67, 0x5c, 0xbe,
	0xfb, 0xf4, 0xdf, 0x78, 0x53, 0xe4, 0x23, 0x5c, 0x9e, 0x0d, 0xca, 0x66, 0xb9, 0x41, 0x0e, 0xb9,
	0x0f, 0x57, 0x80, 0x8c, 0xf5, 0x57, 0x0b, 0x1a, 0x85, 0x17, 0x7b, 0x4e, 0xde, 0x22, 0x9d, 0xfb,
	0xec, 0xff, 0x74, 0x26, 0x14, 0x87, 0xaa, 0x19, 0x87, 0x7b, 0xe5, 0x5e, 0x73, 0xce, 0x65, 0xab,
	0x71, 0xf3, 0x6f, 0x74, 0x5f, 0xfe, 0x18, 0x7b, 0xd6, 0xf1, 0xd8, 0xb3, 0x7e, 0x8f, 0x3d, 0xeb,
	0xcb, 0xc4, 0xab, 0x1c, 0x4f, 0xbc, 0xca, 0xaf, 0x89, 0x57, 0xd9, 0xdd, 0x12, 0xfb, 0x6a, 0x2f,
	0xe3, 0x2c, 0x92, 0x87, 0x6d, 0x12, 0xb8, 0xa5, 0x4d, 0xa7, 0xeb, 0xf6, 0xd1, 0x89, 0x87, 0xee,
	0x53, 0x82, 0xc4, 0xd7, 0xf2, 0xe7, 0xe9, 0xf1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x38,
	0x80, 0x3e, 0x07, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateSubAccount defines a method for creating a subaccount.
	CreateSubAccount(ctx context.Context, in *MsgCreateSubAccount, opts ...grpc.CallOption) (*MsgCreateSubAccountResponse, error)
	// TopUp defines a method for topping up a subaccount.
	TopUp(ctx context.Context, in *MsgTopUp, opts ...grpc.CallOption) (*MsgTopUpResponse, error)
	// WithdrawUnlockedBalances defines a method for withdrawing unlocked balances.
	WithdrawUnlockedBalances(ctx context.Context, in *MsgWithdrawUnlockedBalances, opts ...grpc.CallOption) (*MsgWithdrawUnlockedBalancesResponse, error)
	// PlaceBet defines a method for placing a bet using a subaccount.
	PlaceBet(ctx context.Context, in *MsgPlaceBet, opts ...grpc.CallOption) (*MsgPlaceBetResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateSubAccount(ctx context.Context, in *MsgCreateSubAccount, opts ...grpc.CallOption) (*MsgCreateSubAccountResponse, error) {
	out := new(MsgCreateSubAccountResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.subaccount.Msg/CreateSubAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TopUp(ctx context.Context, in *MsgTopUp, opts ...grpc.CallOption) (*MsgTopUpResponse, error) {
	out := new(MsgTopUpResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.subaccount.Msg/TopUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawUnlockedBalances(ctx context.Context, in *MsgWithdrawUnlockedBalances, opts ...grpc.CallOption) (*MsgWithdrawUnlockedBalancesResponse, error) {
	out := new(MsgWithdrawUnlockedBalancesResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.subaccount.Msg/WithdrawUnlockedBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlaceBet(ctx context.Context, in *MsgPlaceBet, opts ...grpc.CallOption) (*MsgPlaceBetResponse, error) {
	out := new(MsgPlaceBetResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.subaccount.Msg/PlaceBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateSubAccount defines a method for creating a subaccount.
	CreateSubAccount(context.Context, *MsgCreateSubAccount) (*MsgCreateSubAccountResponse, error)
	// TopUp defines a method for topping up a subaccount.
	TopUp(context.Context, *MsgTopUp) (*MsgTopUpResponse, error)
	// WithdrawUnlockedBalances defines a method for withdrawing unlocked balances.
	WithdrawUnlockedBalances(context.Context, *MsgWithdrawUnlockedBalances) (*MsgWithdrawUnlockedBalancesResponse, error)
	// PlaceBet defines a method for placing a bet using a subaccount.
	PlaceBet(context.Context, *MsgPlaceBet) (*MsgPlaceBetResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateSubAccount(ctx context.Context, req *MsgCreateSubAccount) (*MsgCreateSubAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubAccount not implemented")
}
func (*UnimplementedMsgServer) TopUp(ctx context.Context, req *MsgTopUp) (*MsgTopUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUp not implemented")
}
func (*UnimplementedMsgServer) WithdrawUnlockedBalances(ctx context.Context, req *MsgWithdrawUnlockedBalances) (*MsgWithdrawUnlockedBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawUnlockedBalances not implemented")
}
func (*UnimplementedMsgServer) PlaceBet(ctx context.Context, req *MsgPlaceBet) (*MsgPlaceBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBet not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateSubAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSubAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSubAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.subaccount.Msg/CreateSubAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSubAccount(ctx, req.(*MsgCreateSubAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TopUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTopUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TopUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.subaccount.Msg/TopUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TopUp(ctx, req.(*MsgTopUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawUnlockedBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawUnlockedBalances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawUnlockedBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.subaccount.Msg/WithdrawUnlockedBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawUnlockedBalances(ctx, req.(*MsgWithdrawUnlockedBalances))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlaceBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.subaccount.Msg/PlaceBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlaceBet(ctx, req.(*MsgPlaceBet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgenetwork.sge.subaccount.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubAccount",
			Handler:    _Msg_CreateSubAccount_Handler,
		},
		{
			MethodName: "TopUp",
			Handler:    _Msg_TopUp_Handler,
		},
		{
			MethodName: "WithdrawUnlockedBalances",
			Handler:    _Msg_WithdrawUnlockedBalances_Handler,
		},
		{
			MethodName: "PlaceBet",
			Handler:    _Msg_PlaceBet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sge/subaccount/tx.proto",
}

func (m *MsgCreateSubAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockedBalances) > 0 {
		for iNdEx := len(m.LockedBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockedBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SubAccountOwner) > 0 {
		i -= len(m.SubAccountOwner)
		copy(dAtA[i:], m.SubAccountOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubAccountOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSubAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTopUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopUp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopUp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockedBalances) > 0 {
		for iNdEx := len(m.LockedBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockedBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SubAccount) > 0 {
		i -= len(m.SubAccount)
		copy(dAtA[i:], m.SubAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopUpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopUpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopUpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawUnlockedBalances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawUnlockedBalances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawUnlockedBalances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawUnlockedBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawUnlockedBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawUnlockedBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPlaceBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceBet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceBet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceBetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceBetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceBetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateSubAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubAccountOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.LockedBalances) > 0 {
		for _, e := range m.LockedBalances {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateSubAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTopUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.LockedBalances) > 0 {
		for _, e := range m.LockedBalances {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgTopUpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawUnlockedBalances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawUnlockedBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPlaceBet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPlaceBetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateSubAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAccountOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubAccountOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedBalances = append(m.LockedBalances, &LockedBalance{})
			if err := m.LockedBalances[len(m.LockedBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSubAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedBalances = append(m.LockedBalances, &LockedBalance{})
			if err := m.LockedBalances[len(m.LockedBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopUpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopUpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopUpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawUnlockedBalances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawUnlockedBalances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawUnlockedBalances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawUnlockedBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawUnlockedBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawUnlockedBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.MsgPlaceBet{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceBetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceBetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceBetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgPlaceBetResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
