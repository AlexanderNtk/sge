syntax = "proto3";
package sgenetwork.sge.subaccount;

import "sge/subaccount/subaccount.proto";
import "sge/bet/tx.proto";
import "sge/house/tx.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/sge-network/sge/x/subaccount/types";

// Msg defines the Msg service.
service Msg {
  // Create defines a method for creating a subaccount.
  rpc Create(MsgCreate) returns (MsgCreateResponse);

  // TopUp defines a method for topping up a subaccount.
  rpc TopUp(MsgTopUp) returns (MsgTopUpResponse);

  // WithdrawUnlockedBalances defines a method for withdrawing unlocked
  // balances.
  rpc WithdrawUnlockedBalances(MsgWithdrawUnlockedBalances)
      returns (MsgWithdrawUnlockedBalancesResponse);

  // PlaceBet defines a method for placing a bet using a subaccount.
  rpc Wager(MsgWager) returns (MsgWagerResponse);

  // HouseDeposit defines a method for depositing funds to provide liquidity to
  // a market.
  rpc HouseDeposit(MsgHouseDeposit) returns (MsgHouseDepositResponse);

  // HouseWithdraw defines a method for withdrawing funds from a market.
  rpc HouseWithdraw(MsgHouseWithdraw) returns (MsgHouseWithdrawResponse);
}

// MsgCreate defines the Msg/Create request type.
message MsgCreate {
  // sender is the msg signer.
  string sender = 1;

  // sub_account_owner is the owner of the subaccount.
  string sub_account_owner = 2;

  // locked_balances is the list of balance locks.
  repeated LockedBalance locked_balances = 3 [ (gogoproto.nullable) = false ];
}

// MsgCreateAccountResponse defines the Msg/CreateAccount response type.
message MsgCreateResponse {}

// MsgTopUp defines the Msg/TopUp request type.
message MsgTopUp {
  // sender is the msg signer.
  string sender = 1;

  // sub_account is the subaccount address.
  string sub_account = 2;

  // locked_balances is the list of balance locks.
  repeated LockedBalance locked_balances = 3 [ (gogoproto.nullable) = false ];
}

// MsgTopUpResponse defines the Msg/TopUp response type.
message MsgTopUpResponse {}

// MsgWithdrawUnlockedBalances defines the Msg/WithdrawUnlockedBalances request
// type.
message MsgWithdrawUnlockedBalances {
  // sender is the subaccount owner.
  string sender = 1;
}

// MsgWithdrawUnlockedBalancesResponse defines the Msg/WithdrawUnlockedBalances
// response type.
message MsgWithdrawUnlockedBalancesResponse {}

// MsgPlaceBet wraps the MsgPlaceBet message. We need it in order not to have
// double interface registration conflicts.
message MsgWager { sgenetwork.sge.bet.MsgWager msg = 1; }

// MsgBetResponse wraps the MsgPlaceBetResponse message. We need it in order not
// to have double interface registration conflicts.
message MsgWagerResponse { sgenetwork.sge.bet.MsgWagerResponse response = 1; }

// MsgHouseDeposit wraps the MsgHouseDeposit message. We need it in order not to
// have double interface registration conflicts.
message MsgHouseDeposit { sge.house.MsgDeposit msg = 1; }

// MsgHouseDepositResponse wraps the MsgHouseDepositResponse message. We need it
// in order not to have double interface registration conflicts.
message MsgHouseDepositResponse { sge.house.MsgDepositResponse response = 1; }

// MsgHouseWithdraw wraps the MsgHouseWithdraw message. We need it in order not
// to have double interface registration conflicts.
message MsgHouseWithdraw { sge.house.MsgWithdraw msg = 1; }

// MsgHouseWithdrawResponse wraps the MsgHouseWithdrawResponse message. We need
// it in order not to have double interface registration conflicts.
message MsgHouseWithdrawResponse { sge.house.MsgWithdrawResponse response = 1; }