syntax = "proto3";

package sgenetwork.sge.reward;

import "gogoproto/gogo.proto";

option go_package = "github.com/sge-network/sge/x/reward/types";

// Msg defines the Msg service.
service Msg {
  // CreateCampaign is a method to create a campaign
  rpc CreateCampaign(MsgCreateCampaign) returns (MsgCreateCampaignResponse);
  // UpdateCampaign is a method to update campaign
  rpc UpdateCampaign(MsgUpdateCampaign) returns (MsgUpdateCampaignResponse);
  // GrantSignupReward is method to allocate signup rewards
  rpc GrantReward(MsgGrantReward) returns (MsgGrantRewardResponse);
}

// MsgCreateCampaign is msg to create a reward campaign
message MsgCreateCampaign {
  // creator is the address of campaign creator account.
  string creator = 1;
  // uid is the unique identifier of the campaign.
  string uid = 2;
  // ticket is the payload data.
  string ticket = 3;
}

// MsgCreateCampaignResponse campaign create message response type.
message MsgCreateCampaignResponse {}

// MsgUpdateCampaign is campaign update message type.
message MsgUpdateCampaign {
  // creator is the address of creator account.
  string creator = 1;
  // uid is the unique identifier of the campaign.
  string uid = 2;
  // ticket is the payload data.
  string ticket = 3;
}

// MsgUpdateCampaignResponse campaign update message response type.
message MsgUpdateCampaignResponse {}

// MsgGrantReward is execute reward message type.
message MsgGrantReward {
  // creator is the address of creator account.
  string creator = 1;
  // uid is the unique identifier of the reward.
  string uid = 2;
  // campaign_uid is the unique identifier of the reward campaign.
  string campaign_uid = 3;

  // created_at is the time when the reward is created.
  uint64 created_at = 4 [
    (gogoproto.customname) = "CreatedAt",
    (gogoproto.jsontag) = "created_at",
    json_name = "created_at"
  ];
  // ticket is the payload data.
  string ticket = 5;
}

// MsgGrantSignupRewardResponse execute signup reward message response type.
message MsgGrantRewardResponse {}
